Ejecutable como documento HTML5
    con autor allnulled
    con nombre index
    con versi√≥n 1
<head>
    <title>üåê Color Manipulator</title>
    <meta charset="utf8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" type="text/css" href="lib/win7/win7.scoped.2.css" />
    <link rel="stylesheet" type="text/css" href="lib/theme/theme.css" />
    <script src="lib/calo/calo.js"></script>
    <script src="lib/color-manipulator/color-manipulator.js"></script>
    <script src="lib/color-manipulator/color-calculator-parser.js"></script>
</head>
<body><div id="app"></div></body>.

asigno window.PaginaDeInicio como un componente vue2 con nombre "PaginaDeInicio" con plantilla {
  <div class="PaginaDeInicio Component">
    <h5>Playground for <a href="https://github.com/allnulled/color-manipulator"><code>color-manipulator</code></a></h5>
    <div style="padding: 4px;">
      <div class="window active">
        <div class="title-bar">
          <div class="title-bar-text">Color calculator UI</div>
        </div>
        <div class="window-body">
          <div class="lista_de_colores">
            <ul>
              <li>
                <table style="width:100%;">
                  <tbody v-for="color, color_index in lista_de_colores" v-bind:key="'color-' + color_index">
                    <tr>
                      <td style="width:100%;">
                        <div class="recuadro_de_color">
                          <div :style="'background-color:' + color.toRGB()" v-on:click="() => al_clicar_en_color(color_index)"></div>
                        </div>
                        <input type="color" style="display:none;" :ref="'color_picker_' + color_index" v-on:change="evento => al_escoger_color(color_index, evento)" />
                      </td>
                      <td style="width:1%;border:1px solid #CCC; border-radius: 3pt;">
                        {{ color.toHexadecimal() }}
                      </td>
                      <td style="width:1%;border:1px solid #CCC; border-radius: 3pt;">
                        {{ color.toRGB() }}
                      </td>
                      <td style="width:1%;">
                        <button style="min-width:40px;" v-on:click="() => eliminar_color(color_index)">‚úñ</button>
                      </td>
                    </tr>
                    <tr>
                      <td style="width:100%;" colspan="100">
                        <input style="width:100%;" type="text" v-model="lista_de_expresiones[color_index]" v-on:input="evento => al_cambiar_expresion_de_color(color_index, evento)" />
                      </td>
                    </tr>
                  </tbody>
                </table>
              </li>
              <li>
                <button style="width:100%;" v-on:click="agregar_color">‚ûï Add color</button>
              </li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  </div>
} con l√≥gica {
  retorno {
    propiedad props como {
      propiedad root como {
        propiedad type como Object.
        propiedad required como true.
      }.
    }.
    m√©todo data donde {
      retorno {
        lista_de_expresiones: [
          "#000000 + 127"
        ],
        lista_de_colores: [
          ColorManipulator.Color.calculate("#000000 + 127")
        ]
      }.
    }.
    propiedad methods como {
      m√©todo agregar_color donde {
        hago this.lista_de_colores.push(ColorManipulator.Color.create("#000000")).
        hago this.lista_de_expresiones.push("#000000").
      }.
      m√©todo eliminar_color con (color_index) donde {
        hago clearTimeout(this.postponedor_id).
        hago this.lista_de_colores.splice(color_index, 1).
        hago this.lista_de_expresiones.splice(color_index, 1).
      }.
      m√©todo al_cambiar_expresion_de_color con (color_index, evento) donde {
        imprimo color_index.
        imprimo evento.target.value.
        hago clearTimeout(this.postponedor_id).
        asigno this.postponedor_id como setTimeout(una lambda donde {
          creo nuevo_color como ColorManipulator.Color.calculate(evento.target.value).
          imprimo nuevo_color.
          asigno this.lista_de_colores[color_index] como nuevo_color.
          hago this.$forceUpdate(true).
        }, 1000 * 0.5).
      }.
      m√©todo al_clicar_en_color con (color_index) donde {
        hago this.$refs["color_picker_" + color_index][0].click().
      }.
      m√©todo al_escoger_color con (color_index, evento) donde {
        asigno this.lista_de_colores[color_index] como ColorManipulator.Color.create(evento.target.value).
        asigno this.lista_de_expresiones[color_index] como evento.target.value.toUpperCase().
        hago this.$forceUpdate(true).
      }.
    }.
    propiedad watch como {}.
    propiedad computed como {}.
    m√©todo beforeCreate donde {}.
    m√©todo created donde {}.
    m√©todo beforeMount donde {}.
    m√©todo mounted donde {}.
    m√©todo beforeUpdate donde {}.
    m√©todo updated donde {}.
    m√©todo beforeUnmount donde {}.
    m√©todo unmounted donde {}.
    m√©todo activated donde {}.
    m√©todo deactivated donde {}.
  }.
}.

asigno window.App como una aplicaci√≥n vue2 con nombre "App" con rutas [{
  propiedad path como "/".
  propiedad name como "PaginaDeInicio".
  propiedad component como PaginaDeInicio.
  propiedad props como {}.
}] con traducciones {
    propiedad es como {}.
    propiedad en como {}.
    propiedad ca como {}.
} con plantilla {
  <div class="App Component Castelog-app win7">
    <router-view :root="this"></router-view>
  </div>
} con estilos {
    html {}
    body {}
    .Component {}
    .App {}
} con l√≥gica {
  retorno {
    m√©todo data donde {
      retorno {}.
    }.
    propiedad methods como {}.
    propiedad watch como {}.
    m√©todo beforeMount donde {
      asigno this.$window como window.
    }.
    m√©todo mounted donde {}.
  }.
} montada en "#app".